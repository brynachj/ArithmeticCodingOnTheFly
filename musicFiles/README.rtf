{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Instructions for translating a piece of music to a new model\
\
Write pieces in correct format (using pitch: (note,octave) and rhythm: note_length) notation, and save as separate files.\
\
Create rhythm and pitch models from the files described above, using the 'learn' function, ensuring to use "pairs" (-this creates a frequency dependent model).\
NOTE: The complexity of this model doesn't really matter since we're translating, not encoding or generating, and this doesn't take context into account.\
\
Translate the pitch and rhythms using the 'Translate' function.\
\
Feed both the translated files to function "melRhythToMIDI", along with a name for the destination midi file.\
\
For example. If you've got two files:\
Pitch: "CtoF.txt"\
Rhythm: "LatinToClassical.txt"\
you write:\
melRhythToMIDI "CtoF.txt" "LatinToClassical.txt" "destination.midi"\
\
And you would get a file called "destination.midi" which plays the given melody}